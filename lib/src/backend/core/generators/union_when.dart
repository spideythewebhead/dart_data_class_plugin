import 'package:analyzer/dart/ast/ast.dart';
import 'package:data_class_plugin/src/backend/core/generators/generator.dart';
import 'package:data_class_plugin/src/common/code_writer.dart';
import 'package:data_class_plugin/src/extensions/extensions.dart';

class UnionWhenGenerator implements Generator {
  UnionWhenGenerator({
    required CodeWriter codeWriter,
    required String className,
    required String classTypeParametersSource,
    required List<ConstructorDeclaration> factoriesWithRedirectedConstructors,
  })  : _codeWriter = codeWriter,
        _className = className,
        _classTypeParametersSource = classTypeParametersSource,
        _factoriesWithRedirectedConstructors = factoriesWithRedirectedConstructors;

  final CodeWriter _codeWriter;
  final String _className;
  final String _classTypeParametersSource;
  final List<ConstructorDeclaration> _factoriesWithRedirectedConstructors;

  @override
  void execute() {
    _codeWriter
      ..writeln(
          'extension \$$_className$_classTypeParametersSource on $_className$_classTypeParametersSource {')
      ..write('R when<R>({');

    for (final ConstructorDeclaration ctor in _factoriesWithRedirectedConstructors) {
      if (ctor.hasParameters) {
        _codeWriter.writeln(
            'required R Function(${ctor.redirectedConstructor!.beginToken.lexeme}$_classTypeParametersSource value) ${ctor.name!.lexeme},');
      } else {
        _codeWriter.writeln('required R Function() ${ctor.name!.lexeme},');
      }
    }

    _codeWriter.writeln('}) {');

    for (final ConstructorDeclaration ctor in _factoriesWithRedirectedConstructors) {
      final String implementerName =
          '${ctor.redirectedConstructor!.beginToken.lexeme}$_classTypeParametersSource';
      _codeWriter
        ..writeln('if (this is $implementerName) {')
        ..writeln('return ${ctor.name!.lexeme}'
            "(${ctor.hasParameters ? 'this as $implementerName' : ''});")
        ..writeln('}');
    }

    _codeWriter
      ..writeln("throw UnimplementedError('\$runtimeType is not generated by this plugin');")
      ..writeln('}')
      ..writeln()
      ..write('R maybeWhen<R>({');

    for (final ConstructorDeclaration ctor in _factoriesWithRedirectedConstructors) {
      if (ctor.hasParameters) {
        _codeWriter.writeln(
            'R Function(${ctor.redirectedConstructor!.beginToken.lexeme}$_classTypeParametersSource value)? ${ctor.name!.lexeme},');
      } else {
        _codeWriter.writeln('R Function()? ${ctor.name!.lexeme},');
      }
    }

    _codeWriter
      ..writeln('required R Function() orElse,')
      ..writeln('}) {');

    for (final ConstructorDeclaration ctor in _factoriesWithRedirectedConstructors) {
      final String implementerName =
          '${ctor.redirectedConstructor!.beginToken.lexeme}$_classTypeParametersSource';
      _codeWriter
        ..writeln('if (${ctor.name!.lexeme} != null && this is $implementerName) {')
        ..writeln('return ${ctor.name!.lexeme}'
            "(${ctor.hasParameters ? 'this as $implementerName' : ''});")
        ..writeln('}');
    }

    _codeWriter
      ..writeln('return orElse();')
      ..writeln('}')
      ..writeln('}');
  }
}
