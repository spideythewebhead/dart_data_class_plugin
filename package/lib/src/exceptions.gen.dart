// AUTO GENERATED - DO NOT MODIFY
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, inference_failure_on_uninitialized_variable, inference_failure_on_function_return_type, inference_failure_on_untyped_parameter, deprecated_member_use_from_same_package
// coverage:ignore-file

part of 'exceptions.dart';

extension $DcpException on DcpException {
  R when<R>({
    required R Function() pubspecYamlNotFound,
    required R Function() requiresFileGenerationMode,
    required R Function() dartToolFolderNotFound,
    required R Function(DcpExceptionPackageNotFound value) packageNotFound,
    required R Function(DcpExceptionMissingDataClassPluginImport value)
        missingDataClassPluginImport,
  }) {
    if (this is DcpExceptionPubspecYamlNotFound) {
      return pubspecYamlNotFound();
    }
    if (this is DcpExceptionRequiresFileGenerationMode) {
      return requiresFileGenerationMode();
    }
    if (this is DcpExceptionDartToolFolderNotFound) {
      return dartToolFolderNotFound();
    }
    if (this is DcpExceptionPackageNotFound) {
      return packageNotFound(this as DcpExceptionPackageNotFound);
    }
    if (this is DcpExceptionMissingDataClassPluginImport) {
      return missingDataClassPluginImport(this as DcpExceptionMissingDataClassPluginImport);
    }
    throw UnimplementedError('$runtimeType is not generated by this plugin');
  }

  R maybeWhen<R>({
    R Function()? pubspecYamlNotFound,
    R Function()? requiresFileGenerationMode,
    R Function()? dartToolFolderNotFound,
    R Function(DcpExceptionPackageNotFound value)? packageNotFound,
    R Function(DcpExceptionMissingDataClassPluginImport value)? missingDataClassPluginImport,
    required R Function() orElse,
  }) {
    if (pubspecYamlNotFound != null && this is DcpExceptionPubspecYamlNotFound) {
      return pubspecYamlNotFound();
    }
    if (requiresFileGenerationMode != null && this is DcpExceptionRequiresFileGenerationMode) {
      return requiresFileGenerationMode();
    }
    if (dartToolFolderNotFound != null && this is DcpExceptionDartToolFolderNotFound) {
      return dartToolFolderNotFound();
    }
    if (packageNotFound != null && this is DcpExceptionPackageNotFound) {
      return packageNotFound(this as DcpExceptionPackageNotFound);
    }
    if (missingDataClassPluginImport != null && this is DcpExceptionMissingDataClassPluginImport) {
      return missingDataClassPluginImport(this as DcpExceptionMissingDataClassPluginImport);
    }
    return orElse();
  }
}

class DcpExceptionPubspecYamlNotFound extends DcpException {
  const DcpExceptionPubspecYamlNotFound() : super._();

  @override
  int get hashCode {
    return Object.hashAll(<Object?>[
      runtimeType,
    ]);
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        other is DcpExceptionPubspecYamlNotFound && runtimeType == other.runtimeType;
  }
}

class DcpExceptionRequiresFileGenerationMode extends DcpException {
  const DcpExceptionRequiresFileGenerationMode() : super._();

  @override
  int get hashCode {
    return Object.hashAll(<Object?>[
      runtimeType,
    ]);
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        other is DcpExceptionRequiresFileGenerationMode && runtimeType == other.runtimeType;
  }
}

class DcpExceptionDartToolFolderNotFound extends DcpException {
  const DcpExceptionDartToolFolderNotFound() : super._();

  @override
  int get hashCode {
    return Object.hashAll(<Object?>[
      runtimeType,
    ]);
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        other is DcpExceptionDartToolFolderNotFound && runtimeType == other.runtimeType;
  }
}

class DcpExceptionPackageNotFound extends DcpException {
  DcpExceptionPackageNotFound({
    required this.packageName,
  }) : super._();

  final String packageName;

  @override
  int get hashCode {
    return Object.hashAll(<Object?>[
      runtimeType,
      packageName,
    ]);
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        other is DcpExceptionPackageNotFound &&
            runtimeType == other.runtimeType &&
            packageName == other.packageName;
  }
}

class DcpExceptionMissingDataClassPluginImport extends DcpException {
  const DcpExceptionMissingDataClassPluginImport({
    required this.relativeFilePath,
  }) : super._();

  final String relativeFilePath;

  @override
  int get hashCode {
    return Object.hashAll(<Object?>[
      runtimeType,
      relativeFilePath,
    ]);
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        other is DcpExceptionMissingDataClassPluginImport &&
            runtimeType == other.runtimeType &&
            relativeFilePath == other.relativeFilePath;
  }
}
