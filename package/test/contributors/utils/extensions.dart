part of 'utils.dart';

typedef ContributorConstructor = AssistContributor Function(String path);
typedef OffsetProvider = int Function(CompilationUnit unit);

extension InOutFilesList on List<InOutFilesPair> {
  /// Computes and returns the assists generated by the
  /// passed contributor for the the given file.
  Future<AssistCollectorTest> computeAssists({
    required final String path,
    required AnalysisContext context,
    required final ContributorConstructor contributor,
    final OffsetProvider? offsetProvider,
  }) async {
    final AssistContributor assistContributor = contributor(path);
    final AssistCollectorTest collector = AssistCollectorTest();

    final ResolvedUnitResult resolvedUnitResult = await context.currentSession
        .getResolvedUnit(path)
        .then((SomeResolvedUnitResult value) => value as ResolvedUnitResult);

    final CompilationUnit compilationUnit =
        (context.currentSession.getParsedUnit(path) as ParsedUnitResult).unit;

    await assistContributor.computeAssists(
      DartAssistRequestTest(
        offset: offsetProvider?.call(compilationUnit) ?? compilationUnit.beginToken.offset,
        length: compilationUnit.length,
        resourceProvider: PhysicalResourceProvider.INSTANCE,
        result: resolvedUnitResult,
      ),
      collector,
    );

    return collector;
  }

  /// Runs contributor tests found in 'test_files' folder
  void runContributorTests({
    required final ContributorConstructor contributor,
    final OffsetProvider? offsetProvider,
  }) {
    final AnalysisContextCollection analysis = AnalysisContextCollection(
      includedPaths: map((InOutFilesPair e) => e.input.path).toList(growable: false),
      resourceProvider: PhysicalResourceProvider.INSTANCE,
    );

    for (final InOutFilesPair pair in this) {
      final String inPath = pair.input.path;
      final String outPath = pair.output.path;

      test('${path.basename(inPath)} -> ${path.basename(outPath)}', () async {
        final AssistCollectorTest collector = await computeAssists(
          context: analysis.contextFor(inPath),
          path: inPath,
          contributor: contributor,
          offsetProvider: offsetProvider,
        );

        expect(collector.assists, hasLength(1));

        // Read the content of the 'out_.dart' file
        final String expected = io.File(outPath).readAsStringSync().normalizeWhitespaces();

        // Get the code generated from contributor's assists
        final String actual = collector.hasMultipleReplacements
            ? collector.assists.getGeneratedCode().dartFormat()
            : collector.firstReplacement.dartFormat();

        expect(
          actual,
          equals(expected),
        );
      });
    }
  }
}

extension on List<PrioritizedSourceChange> {
  String getGeneratedCode() {
    final List<String> replacements = <String>[];
    for (final PrioritizedSourceChange assist in this) {
      for (final SourceFileEdit edit in assist.change.edits) {
        for (final SourceEdit e in edit.edits
          // keep the order of the change based of the offset
          // same offset must keep the order of appearance
          ..sort((SourceEdit a, SourceEdit b) => a.offset - b.offset)) {
          replacements.add(e.replacement);
        }
      }
    }
    return replacements.join('\n\n');
  }
}
