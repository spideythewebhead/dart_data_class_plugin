// AUTO GENERATED - DO NOT MODIFY

// ignore_for_file: library_private_types_in_public_api, unused_element, unused_field

part of 'shared_fields.dart';

extension $HttpResponse<T> on HttpResponse<T> {
  R when<R>({
    required R Function(HttpResponseOk<T> value) ok,
    required R Function(HttpResponseBadRequest<T> value) badRequest,
  }) {
    if (this is HttpResponseOk<T>) {
      return ok(this as HttpResponseOk<T>);
    }
    if (this is HttpResponseBadRequest<T>) {
      return badRequest(this as HttpResponseBadRequest<T>);
    }
    throw UnimplementedError('$runtimeType is not generated by this plugin');
  }

  R maybeWhen<R>({
    R Function(HttpResponseOk<T> value)? ok,
    R Function(HttpResponseBadRequest<T> value)? badRequest,
    required R Function() orElse,
  }) {
    if (ok != null && this is HttpResponseOk<T>) {
      return ok(this as HttpResponseOk<T>);
    }
    if (badRequest != null && this is HttpResponseBadRequest<T>) {
      return badRequest(this as HttpResponseBadRequest<T>);
    }
    return orElse();
  }
}

class HttpResponseOk<T> extends HttpResponse<T> {
  HttpResponseOk({
    required this.statusCode,
    required this.data,
  }) : super._();

  final int statusCode;

  final T data;

  @override
  int get hashCode {
    return Object.hashAll(<Object?>[
      runtimeType,
      statusCode,
      data,
    ]);
  }

  @override
  bool operator ==(Object? other) {
    return identical(this, other) ||
        other is HttpResponseOk<T> &&
            runtimeType == other.runtimeType &&
            statusCode == other.statusCode &&
            data == other.data;
  }

  @override
  String toString() {
    String toStringOutput = 'HttpResponseOk{<optimized out>}';
    assert(() {
      toStringOutput = 'HttpResponseOk@<$hexIdentity>{statusCode: $statusCode, data: $data}';
      return true;
    }());
    return toStringOutput;
  }
}

class HttpResponseBadRequest<T> extends HttpResponse<T> {
  HttpResponseBadRequest({
    required this.statusCode,
    this.message,
  }) : super._();

  final int statusCode;

  final String? message;

  @override
  int get hashCode {
    return Object.hashAll(<Object?>[
      runtimeType,
      statusCode,
      message,
    ]);
  }

  @override
  bool operator ==(Object? other) {
    return identical(this, other) ||
        other is HttpResponseBadRequest<T> &&
            runtimeType == other.runtimeType &&
            statusCode == other.statusCode &&
            message == other.message;
  }

  @override
  String toString() {
    String toStringOutput = 'HttpResponseBadRequest{<optimized out>}';
    assert(() {
      toStringOutput =
          'HttpResponseBadRequest@<$hexIdentity>{statusCode: $statusCode, message: $message}';
      return true;
    }());
    return toStringOutput;
  }
}
